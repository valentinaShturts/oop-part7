
#include <iostream>
#include "Point (1).h"
using namespace std;

Point::Point(int a, int b)
{
	x = a;
	y = b;
}

void Point::Init(int a, int b)
{
	x = a;
	y = b;
}

void Point::Print()const
{
	cout << x << "\t" << y << endl;
}

Point Point::Sum(Point b) const
{
	Point rez;
	rez.x = this->x + b.x;
	rez.y = this->y + b.y;
	return rez;
	//return Point(this->x + b.x, this->y + b.y); // альтернативный короткий синтаксис
}

int Point::Sum(int b) const
{
	return x + y + b;
}

Point Point::operator+(Point b)
{
	return Point(this->x + b.x, this->y + b.y);
}

int Point::operator+(int b)
{
	return x + y + b;
}

//самостоятельное


Point Point::operator-(Point b)
{
	return Point(this->x - b.x, this->y - b.y);
}

int Point::operator*(int b)
{
	return x * y * b;
}

Point Point::operator*(Point b)
{
	return Point(this->x * b.x, this->y * b.y);
}

//Перегрузка унарных операций 
Point& Point::operator++()
{
	this->x++;
	this->y++;
	return *this;
}

Point& Point::operator--()
{
	this->x -= 10;
	this->y -= 10;
	return *this;
}

Point Point::operator++(int)
{
	Point temp(x, y);
	x++;
	y++;
	return temp;
}

Point Point::operator--(int)
{
	Point temp(x, y);
	x--;
	y--;
	return temp;
}

Point& Point::operator+=(int b)
{
	x += b;
	y += b;
	return *this;
}
Point& Point::operator+=(Point b)
{
	x += b.x;
	y += b.y;
	return *this;
}

Point& Point::operator-=(int b)
{
	x -= b;
	y -= b;
	return *this;
}
Point& Point::operator-=(Point b)
{
	x -= b.x;
	y -= b.y;
	return *this;
}
Point& Point::operator*=(int b)
{
	x *= b;
	y *= b;
	return *this;
}
Point& Point::operator*=(Point b)
{
	x *= b.x;
	y *= b.y;
	return *this;
}
Point& Point::operator/=(int b)
{
	if (b!=0)
	{
		x /= b;
		y /= b;
	}
	return *this;
}
Point& Point::operator/=(Point b)
{
	x /= b.x;
	y /= b.y;
	return *this;
}

bool Point::operator>(Point b)
{
	if (x > b.x && y > b.y) return true;
	return false;
}
bool Point::operator>=(Point b)
{
	if (x >= b.x && y >= b.y) return true;
	return false;
}
bool Point::operator==(Point b)
{
	if (x == b.x && y == b.y) return true;
	return false;
}
bool Point::operator<(Point b)
{
	if (x < b.x && y < b.y) return true;
	return false;
}
bool Point::operator<=(Point b)
{
	if (x <= b.x && y <= b.y) return true;
	return false;
}
bool Point::operator!=(Point b)
{
	if (x != b.x && y != b.y) return true;
	return false;
}
